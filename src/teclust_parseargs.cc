#include <teclust_parseargs.hpp>
#include <boost/program_options.hpp>

using namespace std;
using namespace boost::program_options;

params parseargs(const int argc, char ** argv)
{
  params rv;
  options_description desc("Cluster reads into putative transposable element calls.\nUsage: tclust -h to see help");
  desc.add_options()
    ("help,h", "Produce help message")
    ("bamfile,b",value<string>(&rv.bamfile),"BAM file name (optional)")
    ("tepos,t",value<string>(&rv.reference_datafile),"File containing positions of TEs in reference genome (optional)")
    ("outfile,o",value<string>(&rv.outfile),"Output file name for clusters (required)")
    ("umu,u",value<string>(&rv.umufile),"The um_u output file for the sample generated by process_readmappings (required)")
    ("umm,m",value<string>(&rv.ummfile),"The um_u output file for the sample generated by process_readmappings (required)")
    //("umuref,r",value<string>(&rv.teclust_ref),"The output of this program run on a reference genome, if available (optional)")
    ("isize,i",value<unsigned>(&rv.INSERTSIZE),"Upper limit on insert size distribution, e.g. from bwa_mapdistance. (required)")
    ("mdist,M",value<unsigned>(&rv.MDIST)->default_value(1000u),"Max. distance for joining up left and right ends of putative TEs (required)")
    ("phrapdir,p",value<string>(&rv.phrapdir),"Name of a directory to put input files for de novo assembly of putatitve TE insertions using phrap. If the directory does not exist, it will be created. (optional)")
    ("minreads,r",value<unsigned>(&rv.MINREADS)->default_value(3u),"Min. number of reads in a cluster for writing input files for phrap. (optional)")
    ;

  variables_map vm;
  store(parse_command_line(argc, argv, desc), vm);
  notify(vm);

  if( argc == 1 || 
      vm.count("help") ||
      !vm.count("outfile") ||
      !vm.count("umu") ||
      !vm.count("umm") ||
      !vm.count("isize") ||
      !vm.count("mdist") )
    {
      cerr << desc << '\n';
      exit(0);
    }

  return rv;
}
